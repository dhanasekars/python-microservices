  name: Python application test with Github actions
  on: 
    push:
      branches: ['main']

  jobs:
    build:
      runs-on:  ubuntu-latest
      steps:
        - name: Set up Python 3.10
          uses: actions/setup-python@v1
          with:
            python-version: '3.10'

        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            virtualenvs-create: false
            virtualenvs-in-project: true
            installer-parallel: true

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
        - name: Load cached venv
          id: cached-poetry-dependencies
          uses: actions/cache@v3
          with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
        - uses: actions/checkout@v2
          with:
            submodules: 'recursive'

        - name: Install dependencies
          if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
          run: poetry install --no-interaction --no-root

        - name: Check Venv and Poetry Version
          run: |
              poetry --version
              ls -la  # List files and directories in the current directory

          #----------------------------------------------
          #  -----  run unit and integration tests  -----
          #----------------------------------------------
        - name: Run unit tests
          run: |
            python -m pytest --cov=app/apis --cov=app/utils app/tests/01_unit_tests

        - name: Run integration tests
          run: |
            python -m pytest app/tests/02_integration_tests

        #----------------------------------------------
        #              Set up Docker Buildx
        #----------------------------------------------

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Build and Push Docker Image
          env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
          run: |
            echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
        #----------------------------------------------
        #              Build and Push Docker image 
        #----------------------------------------------
        - name: Build and Push Docker image 
          run: |
            docker buildx create --use
            docker buildx build --push -t dhanasekars/my-todos:latest -f Dockerfile .
            docker logout
